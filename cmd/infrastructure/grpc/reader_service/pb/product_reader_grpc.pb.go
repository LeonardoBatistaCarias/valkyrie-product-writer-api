// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: reader_service/proto/product_reader.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductReaderServiceClient is the client API for ProductReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductReaderServiceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductRes, error)
	DeleteProductByID(ctx context.Context, in *DeleteProductByIDReq, opts ...grpc.CallOption) (*DeleteProductByIDRes, error)
	UpdateProductByID(ctx context.Context, in *UpdateProductByIDReq, opts ...grpc.CallOption) (*UpdateProductByIDRes, error)
}

type productReaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductReaderServiceClient(cc grpc.ClientConnInterface) ProductReaderServiceClient {
	return &productReaderServiceClient{cc}
}

func (c *productReaderServiceClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductRes, error) {
	out := new(CreateProductRes)
	err := c.cc.Invoke(ctx, "/productReader.ProductReaderService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReaderServiceClient) DeleteProductByID(ctx context.Context, in *DeleteProductByIDReq, opts ...grpc.CallOption) (*DeleteProductByIDRes, error) {
	out := new(DeleteProductByIDRes)
	err := c.cc.Invoke(ctx, "/productReader.ProductReaderService/DeleteProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productReaderServiceClient) UpdateProductByID(ctx context.Context, in *UpdateProductByIDReq, opts ...grpc.CallOption) (*UpdateProductByIDRes, error) {
	out := new(UpdateProductByIDRes)
	err := c.cc.Invoke(ctx, "/productReader.ProductReaderService/UpdateProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductReaderServiceServer is the server API for ProductReaderService service.
// All implementations must embed UnimplementedProductReaderServiceServer
// for forward compatibility
type ProductReaderServiceServer interface {
	CreateProduct(context.Context, *CreateProductReq) (*CreateProductRes, error)
	DeleteProductByID(context.Context, *DeleteProductByIDReq) (*DeleteProductByIDRes, error)
	UpdateProductByID(context.Context, *UpdateProductByIDReq) (*UpdateProductByIDRes, error)
	mustEmbedUnimplementedProductReaderServiceServer()
}

// UnimplementedProductReaderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProductReaderServiceServer struct {
}

func (UnimplementedProductReaderServiceServer) CreateProduct(context.Context, *CreateProductReq) (*CreateProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductReaderServiceServer) DeleteProductByID(context.Context, *DeleteProductByIDReq) (*DeleteProductByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedProductReaderServiceServer) UpdateProductByID(context.Context, *UpdateProductByIDReq) (*UpdateProductByIDRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductByID not implemented")
}
func (UnimplementedProductReaderServiceServer) mustEmbedUnimplementedProductReaderServiceServer() {}

// UnsafeProductReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductReaderServiceServer will
// result in compilation errors.
type UnsafeProductReaderServiceServer interface {
	mustEmbedUnimplementedProductReaderServiceServer()
}

func RegisterProductReaderServiceServer(s grpc.ServiceRegistrar, srv ProductReaderServiceServer) {
	s.RegisterService(&ProductReaderService_ServiceDesc, srv)
}

func _ProductReaderService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReaderServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productReader.ProductReaderService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReaderServiceServer).CreateProduct(ctx, req.(*CreateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReaderService_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReaderServiceServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productReader.ProductReaderService/DeleteProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReaderServiceServer).DeleteProductByID(ctx, req.(*DeleteProductByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductReaderService_UpdateProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductReaderServiceServer).UpdateProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/productReader.ProductReaderService/UpdateProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductReaderServiceServer).UpdateProductByID(ctx, req.(*UpdateProductByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductReaderService_ServiceDesc is the grpc.ServiceDesc for ProductReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productReader.ProductReaderService",
	HandlerType: (*ProductReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductReaderService_CreateProduct_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _ProductReaderService_DeleteProductByID_Handler,
		},
		{
			MethodName: "UpdateProductByID",
			Handler:    _ProductReaderService_UpdateProductByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reader_service/proto/product_reader.proto",
}
