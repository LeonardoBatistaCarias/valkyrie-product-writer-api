// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product_writer.proto

package writerService

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("product_writer.proto", fileDescriptor_92df26d016e7c3cc) }

var fileDescriptor_92df26d016e7c3cc = []byte{
	// 120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x4f,
	0x29, 0x4d, 0x2e, 0x89, 0x2f, 0x2f, 0xca, 0x2c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x85, 0xf0, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0xa5, 0x64, 0x51, 0x15, 0xc5,
	0xe7, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x16, 0x43, 0x54, 0x1b, 0x25, 0x71, 0xa1, 0xaa, 0x17,
	0x0a, 0xe4, 0xe2, 0x75, 0x2e, 0x4a, 0x4d, 0x2c, 0x49, 0x0d, 0x80, 0xe8, 0x13, 0x92, 0xd7, 0x43,
	0x51, 0xa0, 0x87, 0x22, 0x1b, 0x94, 0x5a, 0x28, 0x45, 0x40, 0x41, 0xb1, 0x93, 0x50, 0x94, 0x80,
	0x9e, 0xbe, 0x35, 0x8a, 0xa2, 0x24, 0x36, 0xb0, 0xf5, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x31, 0x65, 0x40, 0xfc, 0xc4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WriterServiceClient is the client API for WriterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WriterServiceClient interface {
	CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductRes, error)
}

type writerServiceClient struct {
	cc *grpc.ClientConn
}

func NewWriterServiceClient(cc *grpc.ClientConn) WriterServiceClient {
	return &writerServiceClient{cc}
}

func (c *writerServiceClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductRes, error) {
	out := new(CreateProductRes)
	err := c.cc.Invoke(ctx, "/writerService.writerService/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WriterServiceServer is the server API for WriterService service.
type WriterServiceServer interface {
	CreateProduct(context.Context, *CreateProductReq) (*CreateProductRes, error)
}

// UnimplementedWriterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWriterServiceServer struct {
}

func (*UnimplementedWriterServiceServer) CreateProduct(ctx context.Context, req *CreateProductReq) (*CreateProductRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}

func RegisterWriterServiceServer(s *grpc.Server, srv WriterServiceServer) {
	s.RegisterService(&_WriterService_serviceDesc, srv)
}

func _WriterService_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WriterServiceServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/writerService.writerService/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WriterServiceServer).CreateProduct(ctx, req.(*CreateProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WriterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "writerService.writerService",
	HandlerType: (*WriterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _WriterService_CreateProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_writer.proto",
}
